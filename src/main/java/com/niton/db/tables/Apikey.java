/*
 * This file is generated by jOOQ.
 */
package com.niton.db.tables;


import com.niton.db.Indexes;
import com.niton.db.Keys;
import com.niton.db.ProjEds;
import com.niton.db.tables.records.ApikeyRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Apikey extends TableImpl<ApikeyRecord> {

    private static final long serialVersionUID = -937186351;

    /**
     * The reference instance of <code>proj_eds.apikey</code>
     */
    public static final Apikey APIKEY = new Apikey();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ApikeyRecord> getRecordType() {
        return ApikeyRecord.class;
    }

    /**
     * The column <code>proj_eds.apikey.apikey</code>.
     */
    public final TableField<ApikeyRecord, String> APIKEY_ = createField("apikey", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * Create a <code>proj_eds.apikey</code> table reference
     */
    public Apikey() {
        this(DSL.name("apikey"), null);
    }

    /**
     * Create an aliased <code>proj_eds.apikey</code> table reference
     */
    public Apikey(String alias) {
        this(DSL.name(alias), APIKEY);
    }

    /**
     * Create an aliased <code>proj_eds.apikey</code> table reference
     */
    public Apikey(Name alias) {
        this(alias, APIKEY);
    }

    private Apikey(Name alias, Table<ApikeyRecord> aliased) {
        this(alias, aliased, null);
    }

    private Apikey(Name alias, Table<ApikeyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Apikey(Table<O> child, ForeignKey<O, ApikeyRecord> key) {
        super(child, key, APIKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return ProjEds.PROJ_EDS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.APIKEY_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ApikeyRecord> getPrimaryKey() {
        return Keys.KEY_APIKEY_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ApikeyRecord>> getKeys() {
        return Arrays.<UniqueKey<ApikeyRecord>>asList(Keys.KEY_APIKEY_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Apikey as(String alias) {
        return new Apikey(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Apikey as(Name alias) {
        return new Apikey(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Apikey rename(String name) {
        return new Apikey(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Apikey rename(Name name) {
        return new Apikey(name, null);
    }
}
