/*
 * This file is generated by jOOQ.
 */
package com.niton.db.tables;


import com.niton.db.Indexes;
import com.niton.db.Keys;
import com.niton.db.ProjEds;
import com.niton.db.tables.records.UsersRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * ### Requirements * Name * Email * Password
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Users extends TableImpl<UsersRecord> {

    private static final long serialVersionUID = -1283125291;

    /**
     * The reference instance of <code>proj_eds.users</code>
     */
    public static final Users USERS = new Users();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UsersRecord> getRecordType() {
        return UsersRecord.class;
    }

    /**
     * The column <code>proj_eds.users.name</code>. The name of an user.  unique
     */
    public final TableField<UsersRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "The name of an user.  unique");

    /**
     * The column <code>proj_eds.users.email</code>.
     */
    public final TableField<UsersRecord, String> EMAIL = createField("email", org.jooq.impl.SQLDataType.VARCHAR(320).nullable(false), this, "");

    /**
     * The column <code>proj_eds.users.apikey</code>.
     */
    public final TableField<UsersRecord, String> APIKEY = createField("apikey", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>proj_eds.users.password</code>. # Password   * Min length: 8   * Max Length : 40   * At least one small capitalized char   * One upper case char   * pattern : ^(?&amp;#x3D;.*\\\\d)(?&amp;#x3D;.*[a-z])(?&amp;#x3D;.*[A-Z]).{8,40}$
     */
    public final TableField<UsersRecord, String> PASSWORD = createField("password", org.jooq.impl.SQLDataType.VARCHAR(300).nullable(false), this, "# Password   * Min length: 8   * Max Length : 40   * At least one small capitalized char   * One upper case char   * pattern : ^(?&#x3D;.*\\\\\\\\d)(?&#x3D;.*[a-z])(?&#x3D;.*[A-Z]).{8,40}$");

    /**
     * The column <code>proj_eds.users.private_group</code>.
     */
    public final TableField<UsersRecord, Integer> PRIVATE_GROUP = createField("private_group", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>proj_eds.users</code> table reference
     */
    public Users() {
        this(DSL.name("users"), null);
    }

    /**
     * Create an aliased <code>proj_eds.users</code> table reference
     */
    public Users(String alias) {
        this(DSL.name(alias), USERS);
    }

    /**
     * Create an aliased <code>proj_eds.users</code> table reference
     */
    public Users(Name alias) {
        this(alias, USERS);
    }

    private Users(Name alias, Table<UsersRecord> aliased) {
        this(alias, aliased, null);
    }

    private Users(Name alias, Table<UsersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("### Requirements * Name * Email * Password"));
    }

    public <O extends Record> Users(Table<O> child, ForeignKey<O, UsersRecord> key) {
        super(child, key, USERS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return ProjEds.PROJ_EDS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.USERS_FK_USERS_APIKEY_IDX, Indexes.USERS_FK_USERS_GROUP1_IDX, Indexes.USERS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<UsersRecord> getPrimaryKey() {
        return Keys.KEY_USERS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<UsersRecord>> getKeys() {
        return Arrays.<UniqueKey<UsersRecord>>asList(Keys.KEY_USERS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<UsersRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<UsersRecord, ?>>asList(Keys.FK_USERS_APIKEY, Keys.FK_USERS_GROUP1);
    }

    public Apikey apikey() {
        return new Apikey(this, Keys.FK_USERS_APIKEY);
    }

    public EdsGroup edsGroup() {
        return new EdsGroup(this, Keys.FK_USERS_GROUP1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Users as(String alias) {
        return new Users(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Users as(Name alias) {
        return new Users(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Users rename(String name) {
        return new Users(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Users rename(Name name) {
        return new Users(name, null);
    }
}
