/*
 * This file is generated by jOOQ.
 */
package com.niton.db.tables;


import com.niton.db.Indexes;
import com.niton.db.Keys;
import com.niton.db.ProjEds;
import com.niton.db.tables.records.TaskRecord;

import java.sql.Date;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UByte;


/**
 * A task is a thing you need to do till a certain point.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Task extends TableImpl<TaskRecord> {

    private static final long serialVersionUID = 778634007;

    /**
     * The reference instance of <code>proj_eds.task</code>
     */
    public static final Task TASK = new Task();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TaskRecord> getRecordType() {
        return TaskRecord.class;
    }

    /**
     * The column <code>proj_eds.task.name</code>. The name of the Task. needs to be uniqe
     */
    public final TableField<TaskRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "The name of the Task. needs to be uniqe");

    /**
     * The column <code>proj_eds.task.deadline</code>. The last date where it is totaly needs to be done.
     */
    public final TableField<TaskRecord, Date> DEADLINE = createField("deadline", org.jooq.impl.SQLDataType.DATE.nullable(false), this, "The last date where it is totaly needs to be done.");

    /**
     * The column <code>proj_eds.task.planedDate</code>. The date at which you planed to be done with the task
     */
    public final TableField<TaskRecord, Date> PLANEDDATE = createField("planedDate", org.jooq.impl.SQLDataType.DATE.nullable(false), this, "The date at which you planed to be done with the task");

    /**
     * The column <code>proj_eds.task.description</code>. The description of the task
     */
    public final TableField<TaskRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.VARCHAR(2000).nullable(false), this, "The description of the task");

    /**
     * The column <code>proj_eds.task.importance</code>. A google playstore like rating. it is from zero to ten. Each point describing a half star. 10 is the best as it is 5 Stars
     */
    public final TableField<TaskRecord, UByte> IMPORTANCE = createField("importance", org.jooq.impl.SQLDataType.TINYINTUNSIGNED.nullable(false), this, "A google playstore like rating. it is from zero to ten. Each point describing a half star. 10 is the best as it is 5 Stars");

    /**
     * The column <code>proj_eds.task.entererAt</code>. The date the taks was created
     */
    public final TableField<TaskRecord, Date> ENTERERAT = createField("entererAt", org.jooq.impl.SQLDataType.DATE.nullable(false), this, "The date the taks was created");

    /**
     * The column <code>proj_eds.task.process</code>. How far the task is done in percent
     */
    public final TableField<TaskRecord, UByte> PROCESS = createField("process", org.jooq.impl.SQLDataType.TINYINTUNSIGNED.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINTUNSIGNED)), this, "How far the task is done in percent");

    /**
     * The column <code>proj_eds.task.group_uid</code>.
     */
    public final TableField<TaskRecord, Integer> GROUP_UID = createField("group_uid", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>proj_eds.task.users_email</code>.
     */
    public final TableField<TaskRecord, String> USERS_EMAIL = createField("users_email", org.jooq.impl.SQLDataType.VARCHAR(320).nullable(false), this, "");

    /**
     * The column <code>proj_eds.task.done</code>.
     */
    public final TableField<TaskRecord, UByte> DONE = createField("done", org.jooq.impl.SQLDataType.TINYINTUNSIGNED.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINTUNSIGNED)), this, "");

    /**
     * Create a <code>proj_eds.task</code> table reference
     */
    public Task() {
        this(DSL.name("task"), null);
    }

    /**
     * Create an aliased <code>proj_eds.task</code> table reference
     */
    public Task(String alias) {
        this(DSL.name(alias), TASK);
    }

    /**
     * Create an aliased <code>proj_eds.task</code> table reference
     */
    public Task(Name alias) {
        this(alias, TASK);
    }

    private Task(Name alias, Table<TaskRecord> aliased) {
        this(alias, aliased, null);
    }

    private Task(Name alias, Table<TaskRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("A task is a thing you need to do till a certain point."));
    }

    public <O extends Record> Task(Table<O> child, ForeignKey<O, TaskRecord> key) {
        super(child, key, TASK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return ProjEds.PROJ_EDS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TASK_FK_TASK_GROUP1_IDX, Indexes.TASK_FK_TASK_USERS1_IDX, Indexes.TASK_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TaskRecord> getPrimaryKey() {
        return Keys.KEY_TASK_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TaskRecord>> getKeys() {
        return Arrays.<UniqueKey<TaskRecord>>asList(Keys.KEY_TASK_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<TaskRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TaskRecord, ?>>asList(Keys.ISTINGRUPPE, Keys.GEHÖRT);
    }

    public EdsGroup edsGroup() {
        return new EdsGroup(this, Keys.ISTINGRUPPE);
    }

    public Users users() {
        return new Users(this, Keys.GEHÖRT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Task as(String alias) {
        return new Task(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Task as(Name alias) {
        return new Task(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Task rename(String name) {
        return new Task(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Task rename(Name name) {
        return new Task(name, null);
    }
}
