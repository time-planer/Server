/*
 * This file is generated by jOOQ.
 */
package com.niton.db.tables;


import com.niton.db.Indexes;
import com.niton.db.Keys;
import com.niton.db.ProjEds;
import com.niton.db.tables.records.PatchfeatureRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Patchfeature extends TableImpl<PatchfeatureRecord> {

    private static final long serialVersionUID = 157480020;

    /**
     * The reference instance of <code>proj_eds.patchfeature</code>
     */
    public static final Patchfeature PATCHFEATURE = new Patchfeature();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PatchfeatureRecord> getRecordType() {
        return PatchfeatureRecord.class;
    }

    /**
     * The column <code>proj_eds.patchfeature.description</code>.
     */
    public final TableField<PatchfeatureRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.VARCHAR(2000).nullable(false), this, "");

    /**
     * The column <code>proj_eds.patchfeature.added</code>.
     */
    public final TableField<PatchfeatureRecord, String> ADDED = createField("added", org.jooq.impl.SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>proj_eds.patchfeature.removed</code>.
     */
    public final TableField<PatchfeatureRecord, String> REMOVED = createField("removed", org.jooq.impl.SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>proj_eds.patchfeature.modifyed</code>.
     */
    public final TableField<PatchfeatureRecord, String> MODIFYED = createField("modifyed", org.jooq.impl.SQLDataType.VARCHAR(20), this, "");

    /**
     * Create a <code>proj_eds.patchfeature</code> table reference
     */
    public Patchfeature() {
        this(DSL.name("patchfeature"), null);
    }

    /**
     * Create an aliased <code>proj_eds.patchfeature</code> table reference
     */
    public Patchfeature(String alias) {
        this(DSL.name(alias), PATCHFEATURE);
    }

    /**
     * Create an aliased <code>proj_eds.patchfeature</code> table reference
     */
    public Patchfeature(Name alias) {
        this(alias, PATCHFEATURE);
    }

    private Patchfeature(Name alias, Table<PatchfeatureRecord> aliased) {
        this(alias, aliased, null);
    }

    private Patchfeature(Name alias, Table<PatchfeatureRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Patchfeature(Table<O> child, ForeignKey<O, PatchfeatureRecord> key) {
        super(child, key, PATCHFEATURE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return ProjEds.PROJ_EDS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PATCHFEATURE_ADDED, Indexes.PATCHFEATURE_MODIFYED, Indexes.PATCHFEATURE_REMOVED);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<PatchfeatureRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<PatchfeatureRecord, ?>>asList(Keys.ADDED, Keys.REMOVED, Keys.MODIFYED);
    }

    public Patch added() {
        return new Patch(this, Keys.ADDED);
    }

    public Patch removed() {
        return new Patch(this, Keys.REMOVED);
    }

    public Patch modifyed() {
        return new Patch(this, Keys.MODIFYED);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Patchfeature as(String alias) {
        return new Patchfeature(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Patchfeature as(Name alias) {
        return new Patchfeature(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Patchfeature rename(String name) {
        return new Patchfeature(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Patchfeature rename(Name name) {
        return new Patchfeature(name, null);
    }
}
