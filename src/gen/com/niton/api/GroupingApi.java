/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (3.3.4).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.niton.api;

import java.util.Optional;

import javax.validation.Valid;
import javax.validation.constraints.Size;

import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.context.request.NativeWebRequest;

import com.niton.model.EditGroup;
import com.niton.model.InitialGroup;

@Validated
public interface GroupingApi {

	@RequestMapping(value = "/user/{username}/mygroups/", produces = { "application/json" }, consumes = {
			"application/json" }, method = RequestMethod.POST)
	default ResponseEntity<?> createGroup(@Size(min = 7, max = 320) @PathVariable("username") String username,
			@Valid @RequestBody InitialGroup initialGroup) {
		getRequest().ifPresent(request -> {
			for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
				if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
					ApiUtil.setExampleResponse(request, "application/json",
							"{  \"uid\" : \"uid\",  \"creator\" : \"creator\",  \"members\" : [ {    \"edit\" : true,    \"create\" : true,    \"delete\" : true,    \"email\" : \"email\"  }, {    \"edit\" : true,    \"create\" : true,    \"delete\" : true,    \"email\" : \"email\"  } ],  \"name\" : \"1BHIT\",  \"description\" : \"description\",  \"creation_date\" : \"2000-01-23\",  \"tasks\" : [ \"tasks\", \"tasks\" ]}");
					break;
				}
			}
		});
		return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

	}

	@RequestMapping(value = "/user/{username}/mygroup/{group_UUID}", produces = {
			"application/json" }, method = RequestMethod.DELETE)
	default ResponseEntity<?> deleteGroup(@Size(min = 7, max = 320) @PathVariable("username") String username,
			@Size(min = 30, max = 30) @PathVariable("group_UUID") String groupUUID) {
		getRequest().ifPresent(request -> {
			for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
				if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
					ApiUtil.setExampleResponse(request, "application/json",
							"{  \"uid\" : \"uid\",  \"creator\" : \"creator\",  \"members\" : [ {    \"edit\" : true,    \"create\" : true,    \"delete\" : true,    \"email\" : \"email\"  }, {    \"edit\" : true,    \"create\" : true,    \"delete\" : true,    \"email\" : \"email\"  } ],  \"name\" : \"1BHIT\",  \"description\" : \"description\",  \"creation_date\" : \"2000-01-23\",  \"tasks\" : [ \"tasks\", \"tasks\" ]}");
					break;
				}
			}
		});
		return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

	}

	@RequestMapping(value = "/user/{username}/mygroup/{group_UUID}", produces = { "application/json" }, consumes = {
			"application/json" }, method = RequestMethod.PATCH)
	default ResponseEntity<?> editGroup(@Size(min = 7, max = 320) @PathVariable("username") String username,
			@Size(min = 30, max = 30) @PathVariable("group_UUID") String groupUUID,
			@Valid @RequestBody EditGroup editGroup) {
		getRequest().ifPresent(request -> {
			for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
				if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
					ApiUtil.setExampleResponse(request, "application/json",
							"{  \"uid\" : \"uid\",  \"creator\" : \"creator\",  \"members\" : [ {    \"edit\" : true,    \"create\" : true,    \"delete\" : true,    \"email\" : \"email\"  }, {    \"edit\" : true,    \"create\" : true,    \"delete\" : true,    \"email\" : \"email\"  } ],  \"name\" : \"1BHIT\",  \"description\" : \"description\",  \"creation_date\" : \"2000-01-23\",  \"tasks\" : [ \"tasks\", \"tasks\" ]}");
					break;
				}
			}
		});
		return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

	}

	@RequestMapping(value = "/user/{username}/group/{group_UUID}", produces = {
			"application/json" }, method = RequestMethod.GET)
	default ResponseEntity<?> getGroup(@Size(min = 7, max = 320) @PathVariable("username") String username,
			@Size(min = 30, max = 30) @PathVariable("group_UUID") String groupUUID) {
		getRequest().ifPresent(request -> {
			for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
				if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
					ApiUtil.setExampleResponse(request, "application/json",
							"{  \"uid\" : \"uid\",  \"members\" : 0,  \"name\" : \"1BHIT\",  \"description\" : \"description\",  \"creation_date\" : \"2000-01-23\",  \"tasks\" : 5}");
					break;
				}
			}
		});
		return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

	}

	@RequestMapping(value = "/user/{username}/groups/", produces = { "application/json" }, method = RequestMethod.GET)
	default ResponseEntity<?> getGroups(@Size(min = 7, max = 320) @PathVariable("username") String username) {
		getRequest().ifPresent(request -> {
			for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
				if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
					ApiUtil.setExampleResponse(request, "application/json",
							"{  \"uid\" : \"uid\",  \"members\" : 0,  \"name\" : \"1BHIT\",  \"description\" : \"description\",  \"creation_date\" : \"2000-01-23\",  \"tasks\" : 5}");
					break;
				}
			}
		});
		return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

	}

	@RequestMapping(value = "/user/{username}/mygroup/{group_UUID}", produces = {
			"application/json" }, method = RequestMethod.GET)
	default ResponseEntity<?> getOwnedGroup(@Size(min = 7, max = 320) @PathVariable("username") String username,
			@Size(min = 30, max = 30) @PathVariable("group_UUID") String groupUUID) {
		getRequest().ifPresent(request -> {
			for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
				if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
					ApiUtil.setExampleResponse(request, "application/json",
							"{  \"uid\" : \"uid\",  \"creator\" : \"creator\",  \"members\" : [ {    \"edit\" : true,    \"create\" : true,    \"delete\" : true,    \"email\" : \"email\"  }, {    \"edit\" : true,    \"create\" : true,    \"delete\" : true,    \"email\" : \"email\"  } ],  \"name\" : \"1BHIT\",  \"description\" : \"description\",  \"creation_date\" : \"2000-01-23\",  \"tasks\" : [ \"tasks\", \"tasks\" ]}");
					break;
				}
			}
		});
		return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

	}

	@RequestMapping(value = "/user/{username}/mygroups/", produces = { "application/json" }, method = RequestMethod.GET)
	default ResponseEntity<?> getOwnedGroups(@Size(min = 7, max = 320) @PathVariable("username") String username) {
		getRequest().ifPresent(request -> {
			for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
				if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
					ApiUtil.setExampleResponse(request, "application/json",
							"{  \"uid\" : \"uid\",  \"members\" : 0,  \"name\" : \"1BHIT\",  \"description\" : \"description\",  \"creation_date\" : \"2000-01-23\",  \"tasks\" : 5}");
					break;
				}
			}
		});
		return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

	}

	default Optional<NativeWebRequest> getRequest() {
		return Optional.empty();
	}

}
