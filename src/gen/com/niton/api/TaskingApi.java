/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (3.3.4).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.niton.api;

import java.util.Optional;

import javax.validation.Valid;
import javax.validation.constraints.Size;

import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.context.request.NativeWebRequest;

import com.niton.model.EditTask;
import com.niton.model.ErrorResponse;
import com.niton.model.InitialTask;
import com.niton.model.SuccessResponse;
import com.niton.model.Task;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import io.swagger.annotations.Authorization;

@Validated
@Api(value = "Tasking", description = "the Tasking API")
public interface TaskingApi {

    @ApiOperation(value = "Add Group Task", nickname = "addGroupTask", notes = "Adds a task to the users storage", response = Task.class, authorizations = {
        @Authorization(value = "User_Key")
    }, tags={ "Tasking","Grouping","MemberingGroups", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "task added. The whole created Task in response", response = Task.class),
        @ApiResponse(code = 203, message = "There is no API key in the header. Look into the Autentication User Key to get aknowledge how it works", response = ErrorResponse.class),
        @ApiResponse(code = 401, message = "API key is wrong, get a new one. Maybe it expired", response = ErrorResponse.class),
        @ApiResponse(code = 403, message = "The user doesn't has the permission to perform this acction", response = ErrorResponse.class),
        @ApiResponse(code = 404, message = "There is no user with such an email address. Maybe he deleted his account", response = ErrorResponse.class) })
    @RequestMapping(value = "/user/{username}/group/{group_UUID}/tasks",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<?> addGroupTask(@Size(min=7,max=320) @ApiParam(value = "The users name",required=true) @PathVariable("username") String username,@Size(min=30,max=30) @ApiParam(value = "The UUID of the group to operate with",required=true) @PathVariable("group_UUID") String groupUUID,@ApiParam(value = ""  )  @Valid @RequestBody InitialTask initialTask) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"process\" : 8,  \"importance\" : 4,  \"name\" : \"name\",  \"description\" : \"description\",  \"entererAt\" : \"2000-01-23\",  \"deadline\" : \"2000-01-23\",  \"planedDate\" : \"2000-01-23\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

    @ApiOperation(value = "Add Task", nickname = "addTask", notes = "Adds a task to the users storage", response = Task.class, authorizations = {
        @Authorization(value = "User_Key")
    }, tags={ "Tasking", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "task added. The whole created Task in response", response = Task.class),
        @ApiResponse(code = 203, message = "There is no API key in the header. Look into the Autentication User Key to get aknowledge how it works", response = ErrorResponse.class),
        @ApiResponse(code = 401, message = "API key is wrong, get a new one. Maybe it expired", response = ErrorResponse.class),
        @ApiResponse(code = 404, message = "There is no user with such an email address. Maybe he deleted his account", response = ErrorResponse.class) })
    @RequestMapping(value = "/user/{username}/tasks",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<?> addTask(@Size(min=7,max=320) @ApiParam(value = "The users name",required=true) @PathVariable("username") String username,@ApiParam(value = ""  )  @Valid @RequestBody InitialTask initialTask) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"process\" : 8,  \"importance\" : 4,  \"name\" : \"name\",  \"description\" : \"description\",  \"entererAt\" : \"2000-01-23\",  \"deadline\" : \"2000-01-23\",  \"planedDate\" : \"2000-01-23\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Delete Group Task", nickname = "deleteGroupTask", notes = "Deletes the task", response = Task.class, authorizations = {
        @Authorization(value = "User_Key")
    }, tags={ "Tasking","Grouping","MemberingGroups", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "data delivered", response = Task.class),
        @ApiResponse(code = 203, message = "There is no API key in the header. Look into the Autentication User Key to get aknowledge how it works", response = ErrorResponse.class),
        @ApiResponse(code = 400, message = "The Rask you need is not avainable, mabye you create it first?", response = ErrorResponse.class),
        @ApiResponse(code = 401, message = "API key is wrong, get a new one. Maybe it expired", response = ErrorResponse.class),
        @ApiResponse(code = 403, message = "The user doesn't has the permission to perform this acction", response = ErrorResponse.class),
        @ApiResponse(code = 404, message = "There is no user with such an email address. Maybe he deleted his account", response = ErrorResponse.class) })
    @RequestMapping(value = "/user/{username}/group/{group_UUID}/task/{task}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    default ResponseEntity<?> deleteGroupTask(@Size(min=7,max=320) @ApiParam(value = "The users name",required=true) @PathVariable("username") String username,@Size(min=1,max=50) @ApiParam(value = "The name of the task to edit delte or get detailed information",required=true) @PathVariable("task") String task,@Size(min=30,max=30) @ApiParam(value = "The UUID of the group to operate with",required=true) @PathVariable("group_UUID") String groupUUID) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"process\" : 8,  \"importance\" : 4,  \"name\" : \"name\",  \"description\" : \"description\",  \"entererAt\" : \"2000-01-23\",  \"deadline\" : \"2000-01-23\",  \"planedDate\" : \"2000-01-23\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "deleteTask", notes = "Deletes the task", response = Task.class, authorizations = {
        @Authorization(value = "User_Key")
    }, tags={ "Tasking", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "data delivered", response = Task.class),
        @ApiResponse(code = 203, message = "There is no API key in the header. Look into the Autentication User Key to get aknowledge how it works", response = ErrorResponse.class),
        @ApiResponse(code = 400, message = "The Rask you need is not avainable, mabye you create it first?", response = ErrorResponse.class),
        @ApiResponse(code = 401, message = "API key is wrong, get a new one. Maybe it expired", response = ErrorResponse.class),
        @ApiResponse(code = 404, message = "There is no user with such an email address. Maybe he deleted his account", response = ErrorResponse.class) })
    @RequestMapping(value = "/user/{username}/task/{task}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    default ResponseEntity<?> deleteTask(@Size(min=7,max=320) @ApiParam(value = "The users name",required=true) @PathVariable("username") String username,@Size(min=1,max=50) @ApiParam(value = "The name of the task to edit delte or get detailed information",required=true) @PathVariable("task") String task) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"process\" : 8,  \"importance\" : 4,  \"name\" : \"name\",  \"description\" : \"description\",  \"entererAt\" : \"2000-01-23\",  \"deadline\" : \"2000-01-23\",  \"planedDate\" : \"2000-01-23\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Edit Group Task", nickname = "editGroupTask", notes = "Edit the Task", response = Task.class, authorizations = {
        @Authorization(value = "User_Key")
    }, tags={ "Tasking","Grouping","MemberingGroups", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "EDITED. Respondes the edited task", response = Task.class),
        @ApiResponse(code = 203, message = "There is no API key in the header. Look into the Autentication User Key to get aknowledge how it works", response = ErrorResponse.class),
        @ApiResponse(code = 400, message = "The Rask you need is not avainable, mabye you create it first?", response = ErrorResponse.class),
        @ApiResponse(code = 401, message = "API key is wrong, get a new one. Maybe it expired", response = ErrorResponse.class),
        @ApiResponse(code = 403, message = "The user doesn't has the permission to perform this acction", response = ErrorResponse.class),
        @ApiResponse(code = 404, message = "There is no user with such an email address. Maybe he deleted his account", response = ErrorResponse.class) })
    @RequestMapping(value = "/user/{username}/group/{group_UUID}/task/{task}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PATCH)
    default ResponseEntity<?> editGroupTask(@Size(min=7,max=320) @ApiParam(value = "The users name",required=true) @PathVariable("username") String username,@Size(min=1,max=50) @ApiParam(value = "The name of the task to edit delte or get detailed information",required=true) @PathVariable("task") String task,@Size(min=30,max=30) @ApiParam(value = "The UUID of the group to operate with",required=true) @PathVariable("group_UUID") String groupUUID,@ApiParam(value = "Only need to enter the values to edit"  )  @Valid @RequestBody EditTask editTask) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"process\" : 8,  \"importance\" : 4,  \"name\" : \"name\",  \"description\" : \"description\",  \"entererAt\" : \"2000-01-23\",  \"deadline\" : \"2000-01-23\",  \"planedDate\" : \"2000-01-23\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "editTask", notes = "Edit the Task", response = Task.class, authorizations = {
        @Authorization(value = "User_Key")
    }, tags={ "Tasking", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "EDITED. The edited task", response = Task.class),
        @ApiResponse(code = 203, message = "There is no API key in the header. Look into the Autentication User Key to get aknowledge how it works", response = ErrorResponse.class),
        @ApiResponse(code = 400, message = "The Rask you need is not avainable, mabye you create it first?", response = ErrorResponse.class),
        @ApiResponse(code = 401, message = "API key is wrong, get a new one. Maybe it expired", response = ErrorResponse.class),
        @ApiResponse(code = 404, message = "There is no user with such an email address. Maybe he deleted his account", response = ErrorResponse.class) })
    @RequestMapping(value = "/user/{username}/task/{task}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PATCH)
    default ResponseEntity<?> editTask(@Size(min=7,max=320) @ApiParam(value = "The users name",required=true) @PathVariable("username") String username,@Size(min=1,max=50) @ApiParam(value = "The name of the task to edit delte or get detailed information",required=true) @PathVariable("task") String task,@ApiParam(value = "Only need to enter the values to edit"  )  @Valid @RequestBody EditTask editTask) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"process\" : 8,  \"importance\" : 4,  \"name\" : \"name\",  \"description\" : \"description\",  \"entererAt\" : \"2000-01-23\",  \"deadline\" : \"2000-01-23\",  \"planedDate\" : \"2000-01-23\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Get All Group Tasks", nickname = "getAllGroupTasks", notes = "Fetch the users tasks", response = Task.class, responseContainer = "List", authorizations = {
        @Authorization(value = "User_Key")
    }, tags={ "Tasking","Grouping","MemberingGroups", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "All Tasks of the user in an list", response = Task.class, responseContainer = "List"),
        @ApiResponse(code = 203, message = "API key is wrong, get a new one. Maybe it expired", response = ErrorResponse.class),
        @ApiResponse(code = 400, message = "There is no API key in the header. Look into the Autentication User Key to get aknowledge how it works", response = ErrorResponse.class),
        @ApiResponse(code = 404, message = "There is no user with such an email address. Maybe he deleted his account", response = ErrorResponse.class) })
    @RequestMapping(value = "/user/{username}/group/{group_UUID}/tasks",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<?> getAllGroupTasks(@Size(min=7,max=320) @ApiParam(value = "The users name",required=true) @PathVariable("username") String username,@Size(min=30,max=30) @ApiParam(value = "The UUID of the group to operate with",required=true) @PathVariable("group_UUID") String groupUUID) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"process\" : 8,  \"importance\" : 4,  \"name\" : \"name\",  \"description\" : \"description\",  \"entererAt\" : \"2000-01-23\",  \"deadline\" : \"2000-01-23\",  \"planedDate\" : \"2000-01-23\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Get All Tasks", nickname = "getAllTasks", notes = "Fetch the users tasks", response = Task.class, responseContainer = "List", authorizations = {
        @Authorization(value = "User_Key")
    }, tags={ "Tasking", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "All Tasks of the user in an list", response = Task.class, responseContainer = "List"),
        @ApiResponse(code = 203, message = "API key is wrong, get a new one. Maybe it expired", response = ErrorResponse.class),
        @ApiResponse(code = 400, message = "There is no API key in the header. Look into the Autentication User Key to get aknowledge how it works", response = ErrorResponse.class),
        @ApiResponse(code = 404, message = "There is no user with such an email address. Maybe he deleted his account", response = ErrorResponse.class) })
    @RequestMapping(value = "/user/{username}/tasks",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<?> getAllTasks(@Size(min=7,max=320) @ApiParam(value = "The users name",required=true) @PathVariable("username") String username) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"process\" : 8,  \"importance\" : 4,  \"name\" : \"name\",  \"description\" : \"description\",  \"entererAt\" : \"2000-01-23\",  \"deadline\" : \"2000-01-23\",  \"planedDate\" : \"2000-01-23\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Get Group Task Information", nickname = "getGroupTask", notes = "get detailed information about the task", response = Task.class, authorizations = {
        @Authorization(value = "User_Key")
    }, tags={ "Tasking","Grouping","MemberingGroups", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "data delivered", response = Task.class),
        @ApiResponse(code = 203, message = "There is no API key in the header. Look into the Autentication User Key to get aknowledge how it works", response = ErrorResponse.class),
        @ApiResponse(code = 400, message = "The Rask you need is not avainable, mabye you create it first?", response = ErrorResponse.class),
        @ApiResponse(code = 401, message = "API key is wrong, get a new one. Maybe it expired", response = ErrorResponse.class),
        @ApiResponse(code = 404, message = "There is no user with such an email address. Maybe he deleted his account", response = ErrorResponse.class) })
    @RequestMapping(value = "/user/{username}/group/{group_UUID}/task/{task}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<?> getGroupTask(@Size(min=7,max=320) @ApiParam(value = "The users name",required=true) @PathVariable("username") String username,@Size(min=1,max=50) @ApiParam(value = "The name of the task to edit delte or get detailed information",required=true) @PathVariable("task") String task,@Size(min=30,max=30) @ApiParam(value = "The UUID of the group to operate with",required=true) @PathVariable("group_UUID") String groupUUID) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"process\" : 8,  \"importance\" : 4,  \"name\" : \"name\",  \"description\" : \"description\",  \"entererAt\" : \"2000-01-23\",  \"deadline\" : \"2000-01-23\",  \"planedDate\" : \"2000-01-23\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }


    @ApiOperation(value = "", nickname = "getTask", notes = "get detailed information about the task", response = Task.class, authorizations = {
        @Authorization(value = "User_Key")
    }, tags={ "Tasking", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "data delivered", response = Task.class),
        @ApiResponse(code = 203, message = "There is no API key in the header. Look into the Autentication User Key to get aknowledge how it works", response = ErrorResponse.class),
        @ApiResponse(code = 400, message = "The Rask you need is not avainable, mabye you create it first?", response = ErrorResponse.class),
        @ApiResponse(code = 401, message = "API key is wrong, get a new one. Maybe it expired", response = ErrorResponse.class),
        @ApiResponse(code = 404, message = "There is no user with such an email address. Maybe he deleted his account", response = ErrorResponse.class) })
    @RequestMapping(value = "/user/{username}/task/{task}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<?> getTask(@Size(min=7,max=320) @ApiParam(value = "The users name",required=true) @PathVariable("username") String username,@Size(min=1,max=50) @ApiParam(value = "The name of the task to edit delte or get detailed information",required=true) @PathVariable("task") String task) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"process\" : 8,  \"importance\" : 4,  \"name\" : \"name\",  \"description\" : \"description\",  \"entererAt\" : \"2000-01-23\",  \"deadline\" : \"2000-01-23\",  \"planedDate\" : \"2000-01-23\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Remove All Group Tasks", nickname = "removeAllGroupTasks", notes = "Deletes all Tasks", response = SuccessResponse.class, authorizations = {
        @Authorization(value = "User_Key")
    }, tags={ "Tasking","Grouping","MemberingGroups", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "all tasks deleted", response = SuccessResponse.class),
        @ApiResponse(code = 203, message = "There is no API key in the header. Look into the Autentication User Key to get aknowledge how it works", response = ErrorResponse.class),
        @ApiResponse(code = 401, message = "API key is wrong, get a new one. Maybe it expired", response = ErrorResponse.class),
        @ApiResponse(code = 403, message = "The user doesn't has the permission to perform this acction", response = ErrorResponse.class),
        @ApiResponse(code = 404, message = "There is no user with such an email address. Maybe he deleted his account", response = ErrorResponse.class) })
    @RequestMapping(value = "/user/{username}/group/{group_UUID}/tasks",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    default ResponseEntity<?> removeAllGroupTasks(@Size(min=7,max=320) @ApiParam(value = "The users name",required=true) @PathVariable("username") String username,@Size(min=30,max=30) @ApiParam(value = "The UUID of the group to operate with",required=true) @PathVariable("group_UUID") String groupUUID) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"message\" : \"registration worked\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Remove All Tasks", nickname = "removeAllTasks", notes = "Deletes all Tasks", response = SuccessResponse.class, authorizations = {
        @Authorization(value = "User_Key")
    }, tags={ "Tasking", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "all tasks deleted", response = SuccessResponse.class),
        @ApiResponse(code = 203, message = "There is no API key in the header. Look into the Autentication User Key to get aknowledge how it works", response = ErrorResponse.class),
        @ApiResponse(code = 401, message = "API key is wrong, get a new one. Maybe it expired", response = ErrorResponse.class),
        @ApiResponse(code = 404, message = "There is no user with such an email address. Maybe he deleted his account", response = ErrorResponse.class) })
    @RequestMapping(value = "/user/{username}/tasks",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    default ResponseEntity<?> removeAllTasks(@Size(min=7,max=320) @ApiParam(value = "The users name",required=true) @PathVariable("username") String username) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"message\" : \"registration worked\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
